{
	"info": {
		"_postman_id": "71b50082-cd63-4245-89cc-c81329007d2e",
		"name": "Tax Agile - sample collection - v1.3.3",
		"description": "##### API Version: v1.3.3\n\nThis sample Postman collection is provided to help understand the Tax Agile API, it can be used in conjunction with our swagger OAS3 documentation [https://taxagile.github.io/developer-hub/](https://taxagile.github.io/developer-hub/API)\n\n# Set up\n\nYou need to setup an Environment in Postman and it needs three fields:\n\n## API_ROOT\n\nThis is the server hosting the API you want to make requests to, possible values are:\n\n| **Server** | **API_ROOT** |\n| --- | --- |\n| Production | [https://api.taxagile.io](https://api.taxagile.io) |\n| Staging | [https://test-api.taxagile.io/](https://test-api.taxagile.io/) |\n\n## ACCOUNT_ID\n\nThis is your Tax Agile tenant on our platform, so this is not a username, but instead a identifier of your account as a whole.\n\nWe will provide you your Account Id and API key when you start to implement to our API.\n\n_Note: these credentials will be provisioned against a server, so you must use Production credentials with the Production API_ROOT._\n\n## API_KEY\n\nThis is a uuid string which will be provided by us when you start to implement to our API.\n\n# Collection requests\n\n**GET /health**\n\nAn unauthenticated endpoint, you can call to check you have the correct hostname and your firewall is letting you connect with Tax Agile.\n\n**POST /auth**\n\nCheck you have correctly setup the ACCOUNT_ID and API_KEY collection variables, by trying to get a authentication token.\n\n**Samples by endpoint category:**\n\nWithin this collection, we have 3 sub-folders which break out the samples based on the product use-case you may be interested in. They relate directly to the resources described in our Swagger docs where you can find the complete documentation for these endpoints.\n\n- VAT Auditor\n    \n- VAT Calc\n    \n- Data manager\n    \n\nThe sample requests can be used as a starting point for your own integration, feel free to duplicate and modify them.\n\n# Getting Started\n\nWhen you have setup your environment, you should be able to use the \"Auth\" request without changing anything. If that doesn't work, then there is an issue with your setup; try the GET /health sample, as this ensures you are able to route to our service from your machine.\n\nIf you are able to access the /health endpoint and get a response, then check the details of your authentication request body, make sure you have set the ACCOUNT_ID and API_KEY variables up as collection variables.\n\nWhen you have successfully authenticated, the response contains a Bearer token and the Postman collection has some code in the requests to populate a local collection variable (AUTH_TOKEN) with that bearer token; so you don't have to auth before every request.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20900666"
	},
	"item": [
		{
			"name": "VAT Auditor",
			"item": [
				{
					"name": "Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"AUTH_TOKEN\", jsonData.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"accountId\": \"{{ACCOUNT_ID}}\", \"apiKey\": \"{{API_KEY}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_ROOT}}/v1/auth",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Audit with json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"OPERATION_ID\", jsonData._id);",
									"",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(()=> {}, 10000);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"seller\": {\n                \"sellerUnionOssId\": \"\",\n                \"euDistanceSellingThreshold\": true,\n                \"sellerIossId\": \"\",\n                \"establishedCountry\": \"BE\",\n                \"isTravelAgent\": false,\n                \"vatIdCountry\": \"BE\",\n                \"registeredForDistanceSales\": true,\n                \"type\": \"Taxable person\",\n                \"countriesFixedEstablishment\": \"BE\",\n                \"countriesVATRegistration\": \"BE\",\n                \"name\": \"BE Company BVBA\",\n                \"sellerNonUnionOssId\": \"\"\n            },\n            \"date\": {\n                \"dateOfTransaction\": \"2022-10-15\",\n                \"docDate\": \"2023-02-05\",\n                \"supplyDate\": \"2023-02-05\",\n                \"paymentDate\": \"2023-02-05\"\n            },\n            \"item\": {\n                \"totalAmount\": 1000,\n                \"itemType\": \"Other goods\",\n                \"vatRateToCheck\": 0,\n                \"description\": \"Book\",\n                \"vatAmountToCheck\": 0,\n                \"value\": 1000\n            },\n            \"thirdParties\": {\n                \"mpEstablishedCountry\": \"\",\n                \"mpRegisteredForIOSS\": false,\n                \"mpRegisteredForOSS\": false,\n                \"intermediaryRegisteredForIOSS\": false,\n                \"carrierRegisteredForSpecialArrangements\": false\n            },\n            \"document\": {\n                \"quantity\": 1,\n                \"exchangeRate\": \"\",\n                \"docNumber\": \"IN999\",\n                \"docType\": \"Sales invoice\",\n                \"currency\": \"EUR\",\n                \"lineNumber\": 1,\n                \"vatInclusiveOrExclusive\":\"VAT exclusive\"\n            },\n            \"locations\": {\n                \"shipFrom\": \"BE\",\n                \"departureCountry\": \"\",\n                \"placeOfGoods\": \"DE\",\n                \"placeOfService\": \"\",\n                \"countryImport\": \"\",\n                \"arrivalCountry\": \"\",\n                \"shipTo\": \"DE\"\n            },\n            \"transportTerms\": {\n                \"importerOfRecord\": \"\",\n                \"transport\": \"Seller\"\n            },\n            \"transactionDetail\": {\n                \"durationOfHire\": \"\",\n                \"isCustomsProcedure\": false,\n                \"importedUnderDefermentScheme\": false,\n                \"isCustomsWarehouse\": false,\n                \"isVatWarehouse\": false,\n                \"soldOnMarketplace\": false,\n                \"cashAccounting\": false,\n                \"isExternalTransit\": false,\n                \"isSuccessiveSupply\": false,\n                \"callOffStock\": false\n            },\n            \"buyer\": {\n                \"establishedCountry\": \"DE\",\n                \"isAirline\": false,\n                \"vatIdCountry\": \"DE\",\n                \"type\": \"Taxable person\",\n                \"countriesFixedEstablishment\": \"DE\",\n                \"isVessel\": false,\n                \"isCharity\": false,\n                \"countriesVATRegistration\": \"DE\",\n                \"name\": \"DE Company GmbH\",\n                \"isHospital\": false,\n                \"isGasElecTaxableDealer\": false\n            }\n        }\n    ],\n    \"options\": {\n        \"sendToFiler\": false,\n        \"doTaxCodeMapping\": false\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_ROOT}}/v1/auditor/vat/audits",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"auditor",
								"vat",
								"audits"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Audit - Excel (form-data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"OPERATION_ID\", jsonData._id);",
									"",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(()=> {}, 10000);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"description": "Upload file",
									"type": "file",
									"src": []
								},
								{
									"key": "options",
									"value": "{\"doTaxCodeMapping\": false, \"sendToFiler\": false, \"mappingId\": \"PMTyBJlgbaa2ChOEydk3\"}",
									"description": "Upload options",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_ROOT}}/v1/auditor/vat/audits",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"auditor",
								"vat",
								"audits"
							]
						},
						"description": "For the form-data body, you may have trouble getting Postman to upload a file from your local machine.\n\nCheck the settings:\n\n<img src=\"https://content.pstmn.io/fcb6936e-7921-475b-a525-1c6183d461a4/U2NyZWVuc2hvdCAyMDIzLTA0LTAzIGF0IDE2LjMxLjMwLnBuZw==\" alt=\"\">\n\nIf you have it set like this, you must put your Excel files, in the named Location; or you can turn on \"Allow reading files outside working directory\" to be able to browse your computer for a file."
					},
					"response": []
				},
				{
					"name": "Create Audit - Avalara iVAT XML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"OPERATION_ID\", jsonData._id);",
									"",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(()=> {}, 10000);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"contentType": "application/vnd.avalara.ivat.reporting+xml",
									"description": "Avalara VAT Reporting XML file",
									"type": "file",
									"src": "postman-cloud:///1ef061a6-142f-4870-b655-a32140effe65"
								},
								{
									"key": "options",
									"value": "{\"doTaxCodeMapping\": false, \"sendToFiler\": false, \"mappingId\": \"vnd.avalara.ivat.reporting+xml\"}",
									"description": "Upload options: mappingId needs to be vnd.avalara.ivat.reporting+xml",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_ROOT}}/v1/auditor/vat/audits",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"auditor",
								"vat",
								"audits"
							]
						},
						"description": "For the form-data body, you may have trouble getting Postman to upload a file from your local machine.\n\nCheck the settings:\n\n<img src=\"https://content.pstmn.io/fcb6936e-7921-475b-a525-1c6183d461a4/U2NyZWVuc2hvdCAyMDIzLTA0LTAzIGF0IDE2LjMxLjMwLnBuZw==\" alt=\"\">\n\nIf you have it set like this, you must put your Excel files, in the named Location; or you can turn on \"Allow reading files outside working directory\" to be able to browse your computer for a file."
					},
					"response": []
				},
				{
					"name": "Poll Operations endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"if (pm.response.code === 303) {",
									"    pm.collectionVariables.set(\"AUDIT_HREF\", jsonData.href);",
									"    pm.collectionVariables.set(\"AUDIT_ID\", jsonData.href.split('/')[5]);",
									"}",
									"",
									"pm.test(\"Status code is 200 or 303\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 303])",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {},
						"followRedirects": false
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_ROOT}}/v1/operations/{{OPERATION_ID}}",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"operations",
								"{{OPERATION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Audit summary by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_ROOT}}/v1/auditor/vat/audits/{{AUDIT_ID}}",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"auditor",
								"vat",
								"audits",
								"{{AUDIT_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Audit results by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_ROOT}}/v1/auditor/vat/audits/{{AUDIT_ID}}/results?pageSize=20&startAfter=",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"auditor",
								"vat",
								"audits",
								"{{AUDIT_ID}}",
								"results"
							],
							"query": [
								{
									"key": "pageSize",
									"value": "20",
									"description": "Number of transactions to return in response, max value 1000"
								},
								{
									"key": "startAfter",
									"value": "",
									"description": "The id of the transaction at the end of the previous results page. \nDon't send the param to get the first page"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Audit results as errorList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_ROOT}}/v1/auditor/vat/audits/{{AUDIT_ID}}/results?format=errorList",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"auditor",
								"vat",
								"audits",
								"{{AUDIT_ID}}",
								"results"
							],
							"query": [
								{
									"key": "format",
									"value": "errorList"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Audits - list latest 100 - most recent first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_ROOT}}/v1/auditor/vat/audits/",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"auditor",
								"vat",
								"audits",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Audit by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{API_ROOT}}/v1/auditor/vat/audits/{{AUDIT_ID}}",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"auditor",
								"vat",
								"audits",
								"{{AUDIT_ID}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "In this folder are a series of samples which relate to VAT Auditor, they show using the auditor endpoints to do the upload, and then operations endpoint for polling, and then get results and delete endpoints to complete the lifecycle.\n\nYou can run through this sample sequentially:\n\n1. Start with the Auth to set the Bearer token\n    \n2. Pick one of the POST requests to create an audit\n    \n3. Use the GET Poll Operations to poll for completion\n    \n4. Then try each of the other GET endpoints\n    \n5. And finally run the DELETE endpoint\n    \n\nNote, it is also possible to create an audit by POST to data manager, perhaps if you are using VAT Filer and VAT Auditor you might prefer using the datamanager/vat/uploads resource."
		},
		{
			"name": "VAT Calc",
			"item": [
				{
					"name": "Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"AUTH_TOKEN\", jsonData.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"accountId\": \"{{ACCOUNT_ID}}\", \"apiKey\": \"{{API_KEY}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_ROOT}}/v1/auth",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "VAT Determination - intra-community supply",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"ID\", jsonData.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"transactionData\": {\n        \"date\": {\n            \"docDate\": \"2022-05-09T00:00:00.000Z\",\n            \"supplyDate\": \"2022-05-09T00:00:00.000Z\",\n            \"dateOfTransaction\": \"2022-05-09T00:00:00.000Z\",\n            \"paymentDate\": \"2022-05-09T00:00:00.000Z\"\n        },\n        \"seller\": {\n            \"type\": \"Taxable person\",\n            \"isTravelAgent\": false,\n            \"address\": \"Rue Gillon 59\",\n            \"establishedCountry\": \"BE\",\n            \"city\": \"Brussels\",\n            \"vatIdCountry\": \"BE\",\n            \"countriesFixedEstablishment\": \"BE\",\n            \"countriesVATRegistration\": \"AT,BE,BG,CH,CY,CZ,DE,DK,EE,ES,FI,FR,GB,GR,HR,HU,IE,IT,LT,LU,LV,MT,XI,NL,PL,PT,RO,SE,SI,SK,NO\",\n            \"name\": \"BE Trading BVBA\",\n            \"postCode\": \"1210\"\n        },\n        \"item\": {\n            \"itemType\": \"Animal foodstuffs\",\n            \"itemID\": \"\",\n            \"reversedVatRate\": 0,\n            \"totalAmountCurrency2\": 0,\n            \"vatRate\": 0,\n            \"totalAmount\": 0,\n            \"value\": 100\n        },\n        \"document\": {\n            \"quantity\": 1,\n            \"docNumber\": \"900001\",\n            \"docType\": \"Sales invoice\",\n            \"currency\": \"EUR\",\n            \"lineNumber\": 1\n        },\n        \"buyer\": {\n            \"type\": \"Taxable person\",\n            \"address\": \"Kurfuerstendamm 45\",\n            \"countriesImportDefermentLicence\": \"\",\n            \"establishedCountry\": \"DE\",\n            \"establishmentReceivingSupply\": \"DE\",\n            \"city\": \"München\",\n            \"vatIdCountry\": \"DE\",\n            \"countriesFixedEstablishment\": \"DE\",\n            \"countriesVATRegistration\": \"DE\",\n            \"name\": \"DE Company GmbH\",\n            \"postCode\": \"80011\"\n        },\n        \"locations\": {\n            \"shipFrom\": \"BE\",\n            \"shipTo\": \"DE\"\n        },\n        \"transportTerms\": {\n            \"transport\": \"Seller\"\n        },\n        \"transactionDetail\": {\n            \"callOffStock\": false,\n            \"cashAccounting\": false,\n            \"isExternalTransit\": false\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_ROOT}}/v1/determination/vat/transactions",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"determination",
								"vat",
								"transactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "VAT Determination - local supply",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"ID\", jsonData.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"transactionData\": {\n        \"date\": {\n            \"dateOfTransaction\": \"2022-07-01T00:00:00.000Z\",\n            \"docDate\": \"2022-07-01T00:00:00.000Z\",\n            \"supplyDate\": \"2022-07-01T00:00:00.000Z\",\n            \"paymentDate\": \"2022-07-01T00:00:00.000Z\"\n        },\n        \"seller\": {\n            \"address\": \"Rue Gillon 59\",\n            \"city\": \"Brussels\",\n            \"establishedCountry\": \"BE\",\n            \"vatIdCountry\": \"BE\",\n            \"type\": \"Taxable person\",\n            \"isTravelAgent\": false,\n            \"countriesFixedEstablishment\": \"BE\",\n            \"isCharity\": false,\n            \"countriesVATRegistration\": \"BE\",\n            \"vatGroupID\": \"BE101\",\n            \"name\": \"BE Company BVBA\",\n            \"postCode\": \"1210\",\n            \"isHospital\": false\n        },\n        \"item\": {\n            \"totalAmount\": 10000,\n            \"itemType\": \"Miscellaneous goods\",\n            \"value\": 10000\n        },\n        \"document\": {\n            \"quantity\": 1,\n            \"docNumber\": \"000001\",\n            \"docType\": \"Sales invoice\",\n            \"currency\": \"EUR\",\n            \"lineNumber\": 1\n        },\n        \"locations\": {\n            \"shipFrom\": \"BE\",\n            \"shipTo\": \"BE\"\n        },\n        \"transportTerms\": {\n            \"transport\": \"Seller\"\n        },\n        \"transactionDetail\": {\n            \"callOffStock\": false,\n            \"cashAccounting\": false,\n            \"isExternalTransit\": false\n        },\n        \"buyer\": {\n            \"address\": \"Rue Gillon 59\",\n            \"city\": \"Brussels\",\n            \"establishedCountry\": \"BE\",\n            \"establishmentReceivingSupply\": \"BE\",\n            \"isAirline\": false,\n            \"vatIdCountry\": \"BE\",\n            \"type\": \"Taxable person\",\n            \"countriesFixedEstablishment\": \"BE\",\n            \"isVessel\": false,\n            \"isCharity\": false,\n            \"countriesVATRegistration\": \"BE\",\n            \"vatGroupID\": \"BE101\",\n            \"name\": \"BE Company BVBA\",\n            \"postCode\": \"1210\",\n            \"isHospital\": false\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_ROOT}}/v1/determination/vat/transactions",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"determination",
								"vat",
								"transactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "VAT Determination with useTaxCodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"transactionData\": {\n        \"document\": {\n            \"quantity\": 1,\n            \"docNumber\": \"Test ERP tax code\",\n            \"docType\": \"Sales invoice\",\n            \"currency\": \"EUR\",\n            \"lineNumber\": 1,\n            \"vatInclusiveOrExclusive\": \"VAT exclusive\"\n        },\n        \"date\": {\n            \"dateOfTransaction\": \"2023-09-11\",\n            \"docDate\": \"2023-09-11\",\n            \"supplyDate\": \"2023-09-11\",\n            \"paymentDate\": \"2023-09-11\"\n        },\n        \"transportTerms\": {\n            \"transport\": \"Seller\"\n        },\n        \"seller\": {\n            \"sellerUnionOssId\": \"IM878734\",\n            \"sellerIossId\": \"IM878734\",\n            \"city\": \"Bruxelles\",\n            \"vatIdCountry\": \"BE\",\n            \"type\": \"Taxable person\",\n            \"vatIdType\": \"Main establishment\",\n            \"isHospital\": false,\n            \"id\": \"1\",\n            \"address\": \"Place Marcel Broodthaers 8, 4th Floor\",\n            \"establishedCountry\": \"BE\",\n            \"isTravelAgent\": false,\n            \"countriesFixedEstablishment\": \"AT,BG,HR,CY,CZ,DK,EE,FI,FR,DE,GR,HU,IE,IT,LV,LT,LU,MT,NL,XI,NO,PL,PT,RO,SK,SI,ES,SE,CH,AE,GB,MU,PH\",\n            \"isCharity\": false,\n            \"countriesVATRegistration\": \"AT,BE,BG,HR,CY,CZ,DK,EE,FI,FR,DE,GR,HU,IE,IT,LV,LT,LU,MT,NL,XI,NO,PL,PT,RO,SK,SI,ES,SE,CH,AE,GB,MU,PH\",\n            \"isRegisteredForToms\": false,\n            \"establishmentMakingSupply\": \"BE\",\n            \"vatGroupID\": \"1\",\n            \"name\": \"VAT Calc Demo Company BV\",\n            \"postCode\": \"1060\",\n            \"_id\": \"4112NoFunPXtZ0xcHxo1\",\n            \"sellerNonUnionOssId\": \"IM878734\"\n        },\n        \"transactionDetail\": {\n            \"isExternalTransit\": false,\n            \"cashAccounting\": false,\n            \"isSuccessiveSupply\": false\n        },\n        \"buyer\": {\n            \"establishmentReceivingSupply\": \"BE\",\n            \"city\": \"Brussels\",\n            \"vatIdCountry\": \"BE\",\n            \"type\": \"Taxable person\",\n            \"isVessel\": false,\n            \"vatIdType\": \"Main establishment\",\n            \"isHospital\": false,\n            \"id\": \"BE101\",\n            \"address\": \"Rue Gillon 59\",\n            \"establishedCountry\": \"BE\",\n            \"isTravelAgent\": false,\n            \"isAirline\": false,\n            \"countriesFixedEstablishment\": \"\",\n            \"isCharity\": false,\n            \"countriesVATRegistration\": \"BE\",\n            \"isRegisteredForToms\": false,\n            \"vatGroupID\": \"\",\n            \"name\": \"BE Company BVBA\",\n            \"postCode\": \"1210\",\n            \"_id\": \"dEgNIAQgVaCdQ29Rn3S6\"\n        },\n        \"locations\": {\n            \"shipFrom\": \"BE\",\n            \"shipTo\": \"BE\"\n        },\n        \"item\": {\n            \"itemType\": \"Other goods\",\n            \"userRateCategory\": \"Auto\",\n            \"itemID\": \"\",\n            \"totalAmount\": 0,\n            \"value\": 100\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_ROOT}}/v1/determination/vat/transactions?useTaxCodes=true",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"determination",
								"vat",
								"transactions"
							],
							"query": [
								{
									"key": "useTaxCodes",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "VAT Determination with useTaxCodes and taxCodeScheme",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"transactionData\": {\n        \"document\": {\n            \"quantity\": 1,\n            \"docNumber\": \"Test Avalara tax code\",\n            \"docType\": \"Sales invoice\",\n            \"currency\": \"EUR\",\n            \"lineNumber\": 1,\n            \"vatInclusiveOrExclusive\": \"VAT exclusive\"\n        },\n        \"date\": {\n            \"dateOfTransaction\": \"2023-09-11\",\n            \"docDate\": \"2023-09-11\",\n            \"supplyDate\": \"2023-09-11\",\n            \"paymentDate\": \"2023-09-11\"\n        },\n        \"transportTerms\": {\n            \"transport\": \"Seller\"\n        },\n        \"seller\": {\n            \"sellerUnionOssId\": \"IM878734\",\n            \"sellerIossId\": \"IM878734\",\n            \"city\": \"Bruxelles\",\n            \"vatIdCountry\": \"BE\",\n            \"type\": \"Taxable person\",\n            \"vatIdType\": \"Main establishment\",\n            \"isHospital\": false,\n            \"id\": \"1\",\n            \"address\": \"Place Marcel Broodthaers 8, 4th Floor\",\n            \"establishedCountry\": \"BE\",\n            \"isTravelAgent\": false,\n            \"countriesFixedEstablishment\": \"AT,BG,HR,CY,CZ,DK,EE,FI,FR,DE,GR,HU,IE,IT,LV,LT,LU,MT,NL,XI,NO,PL,PT,RO,SK,SI,ES,SE,CH,AE,GB,MU,PH\",\n            \"isCharity\": false,\n            \"countriesVATRegistration\": \"AT,BE,BG,HR,CY,CZ,DK,EE,FI,FR,DE,GR,HU,IE,IT,LV,LT,LU,MT,NL,XI,NO,PL,PT,RO,SK,SI,ES,SE,CH,AE,GB,MU,PH\",\n            \"isRegisteredForToms\": false,\n            \"establishmentMakingSupply\": \"BE\",\n            \"vatGroupID\": \"1\",\n            \"name\": \"VAT Calc Demo Company BV\",\n            \"postCode\": \"1060\",\n            \"_id\": \"4112NoFunPXtZ0xcHxo1\",\n            \"sellerNonUnionOssId\": \"IM878734\"\n        },\n        \"transactionDetail\": {\n            \"isExternalTransit\": false,\n            \"cashAccounting\": false,\n            \"isSuccessiveSupply\": false\n        },\n        \"buyer\": {\n            \"establishmentReceivingSupply\": \"BE\",\n            \"city\": \"Brussels\",\n            \"vatIdCountry\": \"BE\",\n            \"type\": \"Taxable person\",\n            \"isVessel\": false,\n            \"vatIdType\": \"Main establishment\",\n            \"isHospital\": false,\n            \"id\": \"BE101\",\n            \"address\": \"Rue Gillon 59\",\n            \"establishedCountry\": \"BE\",\n            \"isTravelAgent\": false,\n            \"isAirline\": false,\n            \"countriesFixedEstablishment\": \"\",\n            \"isCharity\": false,\n            \"countriesVATRegistration\": \"BE\",\n            \"isRegisteredForToms\": false,\n            \"vatGroupID\": \"\",\n            \"name\": \"BE Company BVBA\",\n            \"postCode\": \"1210\",\n            \"_id\": \"dEgNIAQgVaCdQ29Rn3S6\"\n        },\n        \"locations\": {\n            \"shipFrom\": \"BE\",\n            \"shipTo\": \"BE\"\n        },\n        \"item\": {\n            \"itemType\": \"Other goods\",\n            \"userRateCategory\": \"Auto\",\n            \"itemID\": \"\",\n            \"totalAmount\": 0,\n            \"value\": 100\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_ROOT}}/v1/determination/vat/transactions?useTaxCodes=true&taxCodeScheme=avalara",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"determination",
								"vat",
								"transactions"
							],
							"query": [
								{
									"key": "useTaxCodes",
									"value": "true"
								},
								{
									"key": "taxCodeScheme",
									"value": "avalara"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "VAT Determination with commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"ID\", jsonData.uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transactionData\":\n  {\n    \"date\": {\n      \"docDate\": \"2022-05-09T00:00:00.000Z\",\n      \"supplyDate\": \"2022-05-09T00:00:00.000Z\",\n      \"dateOfTransaction\": \"2022-05-09T00:00:00.000Z\",\n      \"paymentDate\": \"2022-05-09T00:00:00.000Z\"\n    },\n    \"seller\": {\n      \"type\": \"Taxable person\",      \n      \"isTravelAgent\": false,\n      \"address\": \"Rue Gillon 59\",\n      \"establishedCountry\": \"BE\",\n      \"city\": \"Brussels\",\n      \"vatIdCountry\": \"BE\",\n      \"countriesFixedEstablishment\": \"BE\",\n      \"countriesVATRegistration\": \"AT,BE,BG,CH,CY,CZ,DE,DK,EE,ES,FI,FR,GB,GR,HR,HU,IE,IT,LT,LU,LV,MT,XI,NL,PL,PT,RO,SE,SI,SK,NO\",\n      \"name\": \"BE Trading BVBA\",\n      \"postCode\": \"1210\"\n    },\n    \"item\": {\n      \"itemType\": \"Animal foodstuffs\",\n      \"itemID\": \"\",\n      \"reversedVatRate\": 0,\n      \"totalAmountCurrency2\": 0,\n      \"vatRate\": 0,\n      \"totalAmount\": 0,\n      \"value\": 100\n    },\n    \"document\": {\n      \"quantity\": 1,\n      \"docNumber\": \"900001\",\n      \"docType\": \"Sales invoice\",\n      \"currency\": \"EUR\",\n      \"lineNumber\": 1\n    },\n    \"buyer\": {\n      \"type\": \"Taxable person\",\n      \"address\": \"Kurfuerstendamm 45\",\n      \"countriesImportDefermentLicence\": \"\",\n      \"establishedCountry\": \"DE\",\n      \"establishmentReceivingSupply\": \"DE\",\n      \"city\": \"München\",\n      \"vatIdCountry\": \"DE\",\n      \"countriesFixedEstablishment\": \"DE\",\n      \"countriesVATRegistration\": \"DE\",\n      \"name\": \"DE Company GmbH\",\n      \"postCode\": \"80011\"\n    },\n    \"locations\": {\n      \"shipFrom\": \"BE\",\n      \"shipTo\": \"DE\"\n    },\n    \"transportTerms\": {\n      \"transport\": \"Seller\"\n    },\n    \"transactionDetail\": {\n      \"callOffStock\": false,\n      \"cashAccounting\": false,\n      \"isExternalTransit\": false\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_ROOT}}/v1/determination/vat/transactions?commit=true",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"determination",
								"vat",
								"transactions"
							],
							"query": [
								{
									"key": "commit",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "VAT Determination by ID",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_ROOT}}/v1/determination/vat/transactions/{{ID}}",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"determination",
								"vat",
								"transactions",
								"{{ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "VAT Determinations for date range",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_ROOT}}/v1/determination/vat/transactions?pageSize=5&page=1&entryDateTimeFrom=2023-06-01T00:00:00.000Z",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"determination",
								"vat",
								"transactions"
							],
							"query": [
								{
									"key": "docNumber",
									"value": "900001",
									"description": "Filter results by document number sent on the determination request",
									"disabled": true
								},
								{
									"key": "vatCode",
									"value": "BESICSG000",
									"description": "Filter results by VAT Code issued on the determination response",
									"disabled": true
								},
								{
									"key": "pageSize",
									"value": "5",
									"description": "How many records to get in each response"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Which page of resultset to return for this request"
								},
								{
									"key": "entryDateTimeFrom",
									"value": "2023-06-01T00:00:00.000Z",
									"description": "Entry date/time from"
								},
								{
									"key": "entryDateTimeTo",
									"value": "2022-07-01T23:59:59.999Z",
									"description": "Entry date/time to",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder shows example uses of the VAT Calc determination endpoints, with the different POST options `commit`, `useTaxCodes` and `taxCodeScheme`\n\nTo follow these examples:\n\n1. Start with the Auth request to set the Bearer token\n    \n2. Then use the VAT Determination POST requests\n    \n\nIf you want to try the GET requests, make sure you have first done the 'VAT Determination with commit' to make sure there is a saved transaction on the platform to then GET."
		},
		{
			"name": "Data manager",
			"item": [
				{
					"name": "Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"AUTH_TOKEN\", jsonData.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"accountId\": \"{{ACCOUNT_ID}}\", \"apiKey\": \"{{API_KEY}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_ROOT}}/v1/auth",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload with json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"OPERATION_ID\", jsonData._id);",
									"",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"seller\": {\n                \"sellerUnionOssId\": \"\",\n                \"euDistanceSellingThreshold\": true,\n                \"sellerIossId\": \"\",\n                \"establishedCountry\": \"BE\",\n                \"isTravelAgent\": false,\n                \"vatIdCountry\": \"BE\",\n                \"registeredForDistanceSales\": true,\n                \"type\": \"Taxable person\",\n                \"countriesFixedEstablishment\": \"BE\",\n                \"countriesVATRegistration\": \"BE\",\n                \"name\": \"BE Company BVBA\",\n                \"sellerNonUnionOssId\": \"\"\n            },\n            \"date\": {\n                \"dateOfTransaction\": \"2022-10-15\",\n                \"docDate\": \"2023-02-05\",\n                \"supplyDate\": \"2023-02-05\",\n                \"paymentDate\": \"2023-02-05\"\n            },\n            \"item\": {\n                \"totalAmount\": 1000,\n                \"itemType\": \"Other goods\",\n                \"vatRateToCheck\": 0,\n                \"description\": \"Book\",\n                \"vatAmountToCheck\": 0,\n                \"value\": 1000\n            },\n            \"thirdParties\": {\n                \"mpEstablishedCountry\": \"\",\n                \"mpRegisteredForIOSS\": false,\n                \"mpRegisteredForOSS\": false,\n                \"intermediaryRegisteredForIOSS\": false,\n                \"carrierRegisteredForSpecialArrangements\": false\n            },\n            \"document\": {\n                \"quantity\": 1,\n                \"exchangeRate\": \"\",\n                \"docNumber\": \"IN999\",\n                \"docType\": \"Sales invoice\",\n                \"currency\": \"EUR\",\n                \"lineNumber\": 1,\n                \"vatInclusiveOrExclusive\":\"VAT exclusive\"\n            },\n            \"locations\": {\n                \"shipFrom\": \"BE\",\n                \"departureCountry\": \"\",\n                \"placeOfGoods\": \"DE\",\n                \"placeOfService\": \"\",\n                \"countryImport\": \"\",\n                \"arrivalCountry\": \"\",\n                \"shipTo\": \"DE\"\n            },\n            \"transportTerms\": {\n                \"importerOfRecord\": \"\",\n                \"transport\": \"Seller\"\n            },\n            \"transactionDetail\": {\n                \"durationOfHire\": \"\",\n                \"isCustomsProcedure\": false,\n                \"importedUnderDefermentScheme\": false,\n                \"isCustomsWarehouse\": false,\n                \"isVatWarehouse\": false,\n                \"soldOnMarketplace\": false,\n                \"cashAccounting\": false,\n                \"isExternalTransit\": false,\n                \"isSuccessiveSupply\": false,\n                \"callOffStock\": false\n            },\n            \"buyer\": {\n                \"establishedCountry\": \"DE\",\n                \"isAirline\": false,\n                \"vatIdCountry\": \"DE\",\n                \"type\": \"Taxable person\",\n                \"countriesFixedEstablishment\": \"DE\",\n                \"isVessel\": false,\n                \"isCharity\": false,\n                \"countriesVATRegistration\": \"DE\",\n                \"name\": \"DE Company GmbH\",\n                \"isHospital\": false,\n                \"isGasElecTaxableDealer\": false\n            }\n        }\n    ],\n    \"options\": {\n        \"sendToFiler\": true,\n        \"sendToAuditor\": true,\n        \"doTaxCodeMapping\": true\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_ROOT}}/v1/datamanager/vat/uploads",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"datamanager",
								"vat",
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload with json using data mapping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"OPERATION_ID\", jsonData._id);",
									"",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n        {\n            \"seller\": {\n                \"sellerUnionOssId\": \"\",\n                \"euDistanceSellingThreshold\": true,\n                \"sellerIossId\": \"\",\n                \"establishedCountry\": \"BE\",\n                \"isTravelAgent\": false,\n                \"vatIdCountry\": \"BE\",\n                \"registeredForDistanceSales\": true,\n                \"type\": \"Taxable person\",\n                \"countriesFixedEstablishment\": \"BE\",\n                \"countriesVATRegistration\": \"BE\",\n                \"name\": \"BE Company BVBA\",\n                \"sellerNonUnionOssId\": \"\"\n            },\n            \"date\": {\n                \"dateOfTransaction\": \"2022-10-15\",\n                \"docDate\": \"2023-02-05\",\n                \"supplyDate\": \"2023-02-05\",\n                \"paymentDate\": \"2023-02-05\"\n            },\n            \"item\": {\n                \"totalAmount\": 1000,\n                \"itemType\": \"Other goods\",\n                \"vatRateToCheck\": 0,\n                \"description\": \"Book\",\n                \"vatAmountToCheck\": 0,\n                \"value\": 1000\n            },\n            \"thirdParties\": {\n                \"mpEstablishedCountry\": \"\",\n                \"mpRegisteredForIOSS\": false,\n                \"mpRegisteredForOSS\": false,\n                \"intermediaryRegisteredForIOSS\": false,\n                \"carrierRegisteredForSpecialArrangements\": false\n            },\n            \"document\": {\n                \"quantity\": 1,\n                \"exchangeRate\": \"\",\n                \"docNumber\": \"IN999\",\n                \"docType\": \"Sales invoice\",\n                \"currency\": \"EUR\",\n                \"lineNumber\": 1,\n                \"vatInclusiveOrExclusive\":\"VAT exclusive\"\n            },\n            \"locations\": {\n                \"shipFrom\": \"BE\",\n                \"departureCountry\": \"\",\n                \"placeOfGoods\": \"DE\",\n                \"placeOfService\": \"\",\n                \"countryImport\": \"\",\n                \"arrivalCountry\": \"\",\n                \"shipTo\": \"DE\"\n            },\n            \"transportTerms\": {\n                \"importerOfRecord\": \"\",\n                \"transport\": \"Seller\"\n            },\n            \"transactionDetail\": {\n                \"durationOfHire\": \"\",\n                \"isCustomsProcedure\": false,\n                \"importedUnderDefermentScheme\": false,\n                \"isCustomsWarehouse\": false,\n                \"isVatWarehouse\": false,\n                \"soldOnMarketplace\": false,\n                \"cashAccounting\": false,\n                \"isExternalTransit\": false,\n                \"isSuccessiveSupply\": false,\n                \"callOffStock\": false\n            },\n            \"buyer\": {\n                \"establishedCountry\": \"DE\",\n                \"isAirline\": false,\n                \"vatIdCountry\": \"DE\",\n                \"type\": \"Taxable person\",\n                \"countriesFixedEstablishment\": \"DE\",\n                \"isVessel\": false,\n                \"isCharity\": false,\n                \"countriesVATRegistration\": \"DE\",\n                \"name\": \"DE Company GmbH\",\n                \"isHospital\": false,\n                \"isGasElecTaxableDealer\": false\n            }\n        }\n    ],\n    \"options\": {\n        \"sendToFiler\": true,\n        \"sendToAuditor\": true,\n        \"doTaxCodeMapping\": true,\n        \"mappingId\": \"CTDCqBkBozNOQe1NFoaa\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_ROOT}}/v1/datamanager/vat/uploads",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"datamanager",
								"vat",
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload - Excel (form-data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"OPERATION_ID\", jsonData._id);",
									"",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(()=> {}, 10000);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"description": "Upload file",
									"type": "file",
									"src": []
								},
								{
									"key": "options",
									"value": "{\"doTaxCodeMapping\": false, \"sendToFiler\": true, \"mappingId\": \"PMTyBJlgbaa2ChOEydk3\"}",
									"description": "Upload options",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_ROOT}}/v1/datamanager/vat/uploads",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"datamanager",
								"vat",
								"uploads"
							]
						},
						"description": "For the form-data body, you may have trouble getting Postman to upload a file from your local machine.\n\nCheck the settings:\n\n<img src=\"https://content.pstmn.io/fcb6936e-7921-475b-a525-1c6183d461a4/U2NyZWVuc2hvdCAyMDIzLTA0LTAzIGF0IDE2LjMxLjMwLnBuZw==\" alt=\"\">\n\nIf you have it set like this, you must put your Excel files, in the named Location; or you can turn on \"Allow reading files outside working directory\" to be able to browse your computer for a file."
					},
					"response": []
				},
				{
					"name": "Upload - Avalara iVAT XML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"OPERATION_ID\", jsonData._id);",
									"",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(()=> {}, 10000);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"contentType": "application/vnd.avalara.ivat.reporting+xml",
									"description": "Avalara VAT Reporting XML file",
									"type": "file",
									"src": "postman-cloud:///1ef061a6-142f-4870-b655-a32140effe65"
								},
								{
									"key": "options",
									"value": "{\"doTaxCodeMapping\": false, \"sendToFiler\": false, \"mappingId\": \"vnd.avalara.ivat.reporting+xml\"}",
									"description": "Upload options: mappingId needs to be vnd.avalara.ivat.reporting+xml",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_ROOT}}/v1/datamanager/vat/uploads",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"datamanager",
								"vat",
								"uploads"
							]
						},
						"description": "For the form-data body, you may have trouble getting Postman to upload a file from your local machine.\n\nCheck the settings:\n\n<img src=\"https://content.pstmn.io/fcb6936e-7921-475b-a525-1c6183d461a4/U2NyZWVuc2hvdCAyMDIzLTA0LTAzIGF0IDE2LjMxLjMwLnBuZw==\" alt=\"\">\n\nIf you have it set like this, you must put your Excel files, in the named Location; or you can turn on \"Allow reading files outside working directory\" to be able to browse your computer for a file."
					},
					"response": []
				},
				{
					"name": "Poll Operations endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"if (pm.response.code === 303) {",
									"    pm.collectionVariables.set(\"AUDIT_HREF\", jsonData.href);",
									"    pm.collectionVariables.set(\"AUDIT_ID\", jsonData.href.split('/')[5]);",
									"}",
									"",
									"pm.test(\"Status code is 200 or 303\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 303])",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {},
						"followRedirects": false
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_ROOT}}/v1/operations/{{OPERATION_ID}}",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"operations",
								"{{OPERATION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Uploads - list latest 100 - most recent first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_ROOT}}/v1/datamanager/vat/uploads",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"datamanager",
								"vat",
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get upload document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_ROOT}}/v1/datamanager/vat/uploads/{{OPERATION_ID}}",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"datamanager",
								"vat",
								"uploads",
								"{{OPERATION_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Upload by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{API_ROOT}}/v1/datamanager/vat/uploads/{{OPERATION_ID}}",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"v1",
								"datamanager",
								"vat",
								"uploads",
								"{{OPERATION_ID}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "New in v1.3.0 of the API, Data manager handles the loading of data with pipeline options in a generalised way; rather than it being done in product specific endpoints.\n\n_Note: for backwards compatibility it is still possible to upload data in the VAT Auditor endpoints, and it is possible to send data to VAT Filer from those endpoints, but that usage is deprecated and will be removed in a future version._\n\nTo try these endpoints, pick which of the POST Upload data types you would like to use, then go top down:\n\n1. Auth to get a Bearer token set\n    \n2. Upload (either one of the three examples)\n    \n3. Poll for the operation to complete\n    \n4. Fetch a list of the lates 100 uploads\n    \n5. Get a particular upload document in detail\n    \n6. Delete an upload"
		},
		{
			"name": "Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"AUTH_TOKEN\", jsonData.accessToken);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"accountId\": \"{{ACCOUNT_ID}}\", \"apiKey\": \"{{API_KEY}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_ROOT}}/v1/auth",
					"host": [
						"{{API_ROOT}}"
					],
					"path": [
						"v1",
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Health check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{API_ROOT}}/health",
					"host": [
						"{{API_ROOT}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "AUTH_TOKEN",
			"value": ""
		},
		{
			"key": "ID",
			"value": ""
		},
		{
			"key": "OPERATION_ID",
			"value": ""
		},
		{
			"key": "AUDIT_HREF",
			"value": ""
		},
		{
			"key": "AUDIT_ID",
			"value": ""
		}
	]
}